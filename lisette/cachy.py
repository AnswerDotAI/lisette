"""Cache your LLM requests and make your notebooks fast again"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_cachy.ipynb.

# %% auto 0
__all__ = ['doms', 'enable_cachy']

# %% ../nbs/01_cachy.ipynb 5
import hashlib, httpx, json
from fastcore.utils import *

# %% ../nbs/01_cachy.ipynb 7
doms = ['api.openai.com', 'api.anthropic.com', 'generativelanguage.googleapis.com', 'api.deepseek.com'] 

# %% ../nbs/01_cachy.ipynb 8
def _should_cache(url, doms): return any(dom in str(url) for dom in doms)

# %% ../nbs/01_cachy.ipynb 10
def _cache(key, cfp):
    with open(cfp, 'r') as f:
        line = first(f, lambda x: x.startswith(key))
        return last(line.strip().split('|',1)) if line else None

# %% ../nbs/01_cachy.ipynb 12
def _write_cache(key, content, cfp):
    with open(cfp, 'a') as f: f.write(f"{key}|{str(content)}\n")

# %% ../nbs/01_cachy.ipynb 14
def _apply_sync_patch(cfp, doms):    
    @patch
    def send(self:httpx._client.Client, r, **kwargs):
        is_stream = kwargs.get('stream')
        if not _should_cache(r.url, doms): return self._orig_send(r, **kwargs)
        key = hashlib.sha256((str(r.url)+r.content.decode()+str(is_stream)).encode()).hexdigest()[:8]
        if res := _cache(key, cfp): 
            return httpx.Response(status_code=200, content=json.loads(res) if is_stream else res, request=r)
        res = self._orig_send(r, **kwargs)
        if is_stream: content = b''.join(list(res.iter_bytes())).decode()
        else: content = json.dumps(json.loads(res.read().decode()), separators=(',',':'))
        _write_cache(key, json.dumps(content) if is_stream else content , cfp)
        return httpx.Response(status_code=res.status_code, content=content, request=r)

# %% ../nbs/01_cachy.ipynb 16
def _apply_async_patch(cfp, doms):    
    @patch
    async def send(self:httpx._client.AsyncClient, r, **kwargs):
        is_stream = kwargs.get('stream')
        if not _should_cache(r.url, doms): return await self._orig_send(r, **kwargs)
        key = hashlib.sha256((str(r.url)+r.content.decode()+str(is_stream)).encode()).hexdigest()[:8]
        if res := _cache(key, cfp): 
            return httpx.Response(status_code=200, content=json.loads(res) if is_stream else res, request=r)
        res = await self._orig_send(r, **kwargs)
        if is_stream: content = b''.join([c async for c in res.aiter_bytes()]).decode()
        else: content = json.dumps(json.loads(res.read().decode()), separators=(',',':'))
        _write_cache(key, json.dumps(content) if is_stream else content , cfp)
        return httpx.Response(status_code=res.status_code, content=content, request=r)

# %% ../nbs/01_cachy.ipynb 18
def enable_cachy(cache_dir=None, doms=doms):
    cfp = Path(cache_dir or Config.find('settings.ini').config_path or '.') / 'cachy.txt'
    cfp.touch(exist_ok=True)   
    _apply_sync_patch(cfp, doms)
    _apply_async_patch(cfp, doms)
